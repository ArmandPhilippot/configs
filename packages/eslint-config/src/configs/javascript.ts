import globals from "globals";
import type { Config, RulesOverrides } from "../types";

/**
 * Configure the rules for JavaScript.
 *
 * @param {RulesOverrides} [rulesOverrides] - The rules to override.
 * @returns {Config[]} The JavaScript configuration.
 */
export function javascript(rulesOverrides: RulesOverrides = {}): Config[] {
  return [
    {
      languageOptions: {
        ecmaVersion: "latest",
        globals: {
          ...globals.es2021,
          ...globals.browser,
          ...globals.node,
          document: "readonly",
          navigator: "readonly",
          window: "readonly",
        },
        parserOptions: {
          ecmaFeatures: {
            jsx: true,
          },
          ecmaVersion: "latest",
          sourceType: "module",
        },
      },
      linterOptions: {
        reportUnusedDisableDirectives: true,
      },
      name: "arphi/javascript",
      rules: {
        "accessor-pairs": [
          "error",
          {
            enforceForClassMembers: true,
            getWithoutSet: false,
            setWithoutGet: true,
          },
        ],
        "array-callback-return": ["error", { checkForEach: true }],
        "arrow-body-style": [
          "error",
          "as-needed",
          { requireReturnForObjectLiteral: true },
        ],
        "block-scoped-var": "error",
        camelcase: [
          "error",
          {
            ignoreDestructuring: false,
            ignoreGlobals: false,
            ignoreImports: false,
            properties: "always",
          },
        ],
        "capitalized-comments": [
          "error",
          "always",
          {
            ignoreConsecutiveComments: true,
            ignoreInlineComments: true,
            ignorePattern: "cSpell",
          },
        ],
        "class-methods-use-this": ["error", { enforceForClassFields: true }],
        complexity: ["warn", { max: 15 }],
        "consistent-return": ["error", { treatUndefinedAsUnspecified: false }],
        "consistent-this": ["error", "that"],
        "constructor-super": "error",
        curly: ["error", "multi-line", "consistent"],
        "default-case": "error",
        "default-case-last": "error",
        "default-param-last": "error",
        "dot-notation": ["error", { allowKeywords: true }],
        eqeqeq: ["error", "always"],
        "for-direction": "error",
        "func-name-matching": [
          "error",
          "always",
          {
            considerPropertyDescriptor: false,
            includeCommonJSModuleExports: false,
          },
        ],
        "func-names": ["error", "as-needed"],
        "func-style": "off",
        "getter-return": "error",
        "grouped-accessor-pairs": ["error", "setBeforeGet"],
        "guard-for-in": "error",
        "id-denylist": "off",
        "id-length": "off",
        "id-match": "off",
        "init-declarations": ["error", "always"],
        "logical-assignment-operators": [
          "error",
          "always",
          { enforceForIfStatements: true },
        ],
        "max-classes-per-file": "off",
        "max-depth": ["error", { max: 3 }],
        "max-lines": "off",
        "max-lines-per-function": "off",
        "max-nested-callbacks": ["error", { max: 10 }],
        "max-params": ["error", { max: 3 }],
        "max-statements": "off",
        "new-cap": [
          "error",
          { capIsNew: true, newIsCap: true, properties: true },
        ],
        "no-alert": "error",
        "no-array-constructor": "error",
        "no-async-promise-executor": "error",
        "no-await-in-loop": "error",
        "no-bitwise": ["error", { int32Hint: false }],
        "no-caller": "error",
        "no-case-declarations": "error",
        "no-class-assign": "error",
        "no-compare-neg-zero": "error",
        "no-cond-assign": ["error", "always"],
        "no-console": "off",
        "no-const-assign": "error",
        "no-constant-binary-expression": "error",
        "no-constant-condition": [
          "error",
          { checkLoops: "allExceptWhileTrue" },
        ],
        "no-constructor-return": "error",
        // I think it's more readable using continue than wrapping with if.
        "no-continue": "off",
        "no-control-regex": "error",
        "no-debugger": "error",
        "no-delete-var": "error",
        "no-div-regex": "error",
        "no-dupe-args": "error",
        "no-dupe-class-members": "error",
        "no-dupe-else-if": "error",
        "no-dupe-keys": "error",
        "no-duplicate-case": "error",
        "no-duplicate-imports": ["error", { includeExports: true }],
        "no-else-return": ["error", { allowElseIf: true }],
        "no-empty": ["error", { allowEmptyCatch: false }],
        "no-empty-character-class": "error",
        "no-empty-function": ["error", { allow: [] }],
        "no-empty-pattern": [
          "error",
          { allowObjectPatternsAsParameters: false },
        ],
        "no-empty-static-block": "error",
        "no-eq-null": "error",
        "no-eval": ["error", { allowIndirect: false }],
        "no-ex-assign": "error",
        "no-extend-native": "error",
        "no-extra-bind": "error",
        "no-extra-boolean-cast": [
          "error",
          { enforceForInnerExpressions: true },
        ],
        "no-extra-label": "error",
        "no-fallthrough": ["error", { allowEmptyCase: false }],
        "no-func-assign": "error",
        "no-global-assign": "error",
        "no-implicit-coercion": [
          "error",
          {
            allow: ["!!"],
            boolean: true,
            disallowTemplateShorthand: false,
            number: true,
            string: true,
          },
        ],
        "no-implicit-globals": "error",
        "no-implied-eval": "error",
        "no-import-assign": "error",
        "no-inline-comments": "off",
        "no-inner-declarations": [
          "error",
          "both",
          { blockScopedFunctions: "disallow" },
        ],
        "no-invalid-regexp": "error",
        "no-invalid-this": ["error", { capIsConstructor: true }],
        "no-irregular-whitespace": [
          "error",
          {
            skipComments: true,
            skipJSXText: false,
            skipRegExps: false,
            skipStrings: true,
            skipTemplates: false,
          },
        ],
        "no-iterator": "error",
        "no-label-var": "error",
        "no-labels": "error",
        "no-lone-blocks": "error",
        "no-lonely-if": "error",
        "no-loop-func": "error",
        "no-loss-of-precision": "error",
        "no-magic-numbers": [
          "error",
          {
            detectObjects: false,
            enforceConst: true,
            ignore: [-1, 0, 1],
            ignoreArrayIndexes: false,
            ignoreClassFieldInitialValues: true,
            ignoreDefaultValues: true,
          },
        ],
        "no-misleading-character-class": ["error", { allowEscape: false }],
        "no-multi-assign": ["error", { ignoreNonDeclaration: false }],
        "no-multi-str": "error",
        "no-negated-condition": "error",
        "no-nested-ternary": "error",
        "no-new": "error",
        "no-new-func": "error",
        "no-new-native-nonconstructor": "error",
        "no-new-wrappers": "error",
        "no-nonoctal-decimal-escape": "error",
        "no-obj-calls": "error",
        "no-object-constructor": "error",
        "no-octal": "error",
        "no-octal-escape": "error",
        "no-param-reassign": ["error", { props: true }],
        "no-plusplus": ["error", { allowForLoopAfterthoughts: true }],
        "no-promise-executor-return": ["error", { allowVoid: false }],
        "no-proto": "error",
        "no-prototype-builtins": "error",
        "no-redeclare": ["error", { builtinGlobals: true }],
        "no-regex-spaces": "error",
        "no-restricted-exports": "off",
        "no-restricted-properties": "off",
        "no-restricted-syntax": "off",
        "no-return-assign": ["error", "always"],
        "no-script-url": "error",
        "no-self-assign": ["error", { props: true }],
        "no-self-compare": "error",
        "no-sequences": ["error", { allowInParentheses: false }],
        "no-setter-return": "error",
        "no-shadow": [
          "error",
          {
            allow: [
              "cb",
              "done",
              "event",
              "name",
              "reject",
              "resolve",
              "status",
            ],
            builtinGlobals: true,
            hoist: "all",
            ignoreOnInitialization: false,
          },
        ],
        "no-shadow-restricted-names": "error",
        "no-sparse-arrays": "error",
        "no-template-curly-in-string": "error",
        "no-ternary": "off",
        "no-this-before-super": "error",
        "no-throw-literal": "error",
        "no-undef": ["error", { typeof: false }],
        "no-undef-init": "error",
        // Too restrictive with third-party modules types
        "no-undefined": "off",
        "no-underscore-dangle": [
          "error",
          {
            // Useful in rehype plugins.
            allow: ["_mdxExplicitJsx"],
            allowAfterSuper: false,
            allowAfterThis: false,
            allowAfterThisConstructor: false,
            allowFunctionParams: true,
            allowInArrayDestructuring: true,
            allowInObjectDestructuring: true,
            enforceInClassFields: false,
            enforceInMethodNames: false,
          },
        ],
        "no-unexpected-multiline": "error",
        "no-unmodified-loop-condition": "error",
        "no-unneeded-ternary": ["error", { defaultAssignment: false }],
        "no-unreachable": "error",
        "no-unreachable-loop": "error",
        "no-unsafe-finally": "error",
        "no-unsafe-negation": ["error", { enforceForOrderingRelations: true }],
        "no-unsafe-optional-chaining": [
          "error",
          { disallowArithmeticOperators: true },
        ],
        "no-unused-expressions": [
          "error",
          {
            allowShortCircuit: false,
            allowTaggedTemplates: false,
            allowTernary: false,
            enforceForJSX: false,
          },
        ],
        "no-unused-labels": "error",
        "no-unused-private-class-members": "error",
        "no-unused-vars": [
          "error",
          {
            args: "after-used",
            argsIgnorePattern: "^_",
            caughtErrors: "all",
            destructuredArrayIgnorePattern: "^_",
            ignoreClassWithStaticInitBlock: false,
            ignoreRestSiblings: false,
            reportUsedIgnorePattern: true,
            vars: "all",
            varsIgnorePattern: "^_",
          },
        ],
        "no-use-before-define": [
          "error",
          {
            allowNamedExports: false,
            classes: true,
            functions: true,
            variables: true,
          },
        ],
        "no-useless-assignment": "error",
        "no-useless-backreference": "error",
        "no-useless-call": "error",
        "no-useless-catch": "error",
        "no-useless-computed-key": ["error", { enforceForClassMembers: true }],
        "no-useless-concat": "error",
        "no-useless-constructor": "error",
        "no-useless-rename": "error",
        "no-useless-return": "error",
        "no-var": "error",
        "no-void": ["error", { allowAsStatement: true }],
        "no-warning-comments": "warn",
        "no-with": "error",
        "object-shorthand": [
          "error",
          "always",
          {
            avoidExplicitReturnArrows: false,
            avoidQuotes: false,
            ignoreConstructors: false,
          },
        ],
        "one-var": ["error", { initialized: "never", uninitialized: "always" }],
        "operator-assignment": "off",
        "prefer-arrow-callback": [
          "error",
          { allowNamedFunctions: false, allowUnboundThis: true },
        ],
        "prefer-const": [
          "error",
          {
            destructuring: "any",
            ignoreReadBeforeAssign: false,
          },
        ],
        "prefer-destructuring": [
          "error",
          {
            array: true,
            object: true,
          },
          {
            enforceForRenamedProperties: false,
          },
        ],
        "prefer-exponentiation-operator": "off",
        "prefer-named-capture-group": "error",
        "prefer-numeric-literals": "error",
        "prefer-object-has-own": "error",
        "prefer-object-spread": "error",
        "prefer-promise-reject-errors": ["error", { allowEmptyReject: false }],
        "prefer-regex-literals": ["error", { disallowRedundantWrapping: true }],
        "prefer-rest-params": "error",
        "prefer-spread": "error",
        "prefer-template": "error",
        radix: ["error", "always"],
        "require-atomic-updates": ["error", { allowProperties: false }],
        "require-await": "error",
        "require-unicode-regexp": "off",
        "require-yield": "error",
        "sort-imports": "off",
        "sort-keys": "off",
        "sort-vars": ["error", { ignoreCase: false }],
        strict: "off",
        "symbol-description": "error",
        "unicode-bom": ["error", "never"],
        "use-isnan": [
          "error",
          { enforceForIndexOf: true, enforceForSwitchCase: true },
        ],
        "valid-typeof": ["error", { requireStringLiterals: true }],
        "vars-on-top": "error",
        yoda: ["error", "never"],
        ...rulesOverrides,
      },
    },
  ];
}
